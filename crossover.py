# -*- coding: utf-8 -*-
"""crossover.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Het2dOOzkJKOX8hWfsIbnYN7uhL-ZP5
"""

import pandas as pd
import numpy as np
!pip install yfinance
import yfinance as yf
!pip install pandas_ta
import pandas_ta as ta
import matplotlib.pyplot as plt

hdb=yf.Ticker("HCLTECH.NS")
hdb.history(period="1y")

def ema(data,window):
  return data['Close'].ewm(span=window).mean()
def rsi(data):
 delta=data['Close'].diff()
 gain=delta.where(delta>0,0)
 loss=-delta.where(delta<0,0)
 avg_gain=gain.rolling(window=14).mean()
 avg_loss=loss.rolling(window=14).mean()
 rs=avg_gain/avg_loss
 rsi=100-(100/(1+rs))
 return rsi
def signals(data,ema_window1,ema_window2):
  signals=pd.DataFrame(index=data.index)
  signals['EMA_short']=ema(data,ema_window1)
  signals['EMA_long']=ema(data,ema_window2)
  signals['RSI']=rsi(data)
  signals['Signal'] = 0
  signals['Signal']=np.where((signals['EMA_short']>signals['EMA_long']) & (signals['EMA_short'].shift(1) <= signals['EMA_long'].shift(1)),1.0,0.0)
  signals['Signal'] = signals['Signal'].replace(0, np.nan).fillna(method='ffill')
  signals['Signal']=np.where((signals['EMA_short']<signals['EMA_long']) & (signals['EMA_long'].shift(1) <= signals['EMA_short'].shift(1)),-1.0,signals['Signal'])
  signals['Signal'] = signals['Signal'].replace(0, np.nan).fillna(method='ffill')

  return(signals)

data=hdb.history(period="4y")
ema_window1=5
ema_window2=12
signals=signals(data,ema_window1,ema_window2).dropna()
print(signals)

def backtest(data,signals,initial_capital=100001,compound=True):
    positions = pd.DataFrame(index=data.index)
    positions['Position'] = signals['Signal']
    positions['Stock'] = 100 * positions['Position'] #Buying 50 shares
    portfolio = positions.multiply(data['Close'], axis=0)
    pos_diff = positions.diff()
    portfolio['Cash'] = initial_capital - (pos_diff['Stock'] * data['Close']).cumsum()
    portfolio['Total'] = portfolio['Stock'] + portfolio['Cash']
    portfolio['Returns'] = portfolio['Total'].pct_change()
    if compound:
        portfolio['Returns'] = (1 + portfolio['Returns']).cumprod() - 1
    return portfolio
portfolio=backtest(data,signals).dropna()
print(portfolio)

portfolio['Total'].plot(title="Equity Curve")

(portfolio['Total'].cummax()-portfolio['Total']).plot(title="Drawdown chart")

(portfolio['Returns'].rolling(window=20).std()).plot(title="Volatility Chart")

avg_return=portfolio['Returns'].mean()
stdev_return=portfolio['Returns'].std()
R=0.06
sharpe=(avg_return-R)/stdev_return
print(sharpe)

